# Generated by Django 5.0.7 on 2025-08-05 19:57

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('members', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='KPIMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('metric_type', models.CharField(choices=[('count', 'Count'), ('sum', 'Sum'), ('average', 'Average'), ('percentage', 'Percentage'), ('ratio', 'Ratio'), ('rate', 'Rate')], max_length=20)),
                ('calculation_query', models.TextField(help_text='SQL query to calculate the metric')),
                ('calculation_period', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly'), ('all_time', 'All Time')], max_length=20)),
                ('display_format', models.CharField(default='{value}', max_length=50)),
                ('unit', models.CharField(blank=True, max_length=20, null=True)),
                ('target_value', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('warning_threshold', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('critical_threshold', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('current_value', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('previous_value', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('last_calculated', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_public', models.BooleanField(default=True)),
                ('auto_calculate', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'KPI Metric',
                'verbose_name_plural': 'KPI Metrics',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Dashboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('dashboard_type', models.CharField(choices=[('executive', 'Executive Dashboard'), ('operational', 'Operational Dashboard'), ('loan_officer', 'Loan Officer Dashboard'), ('member', 'Member Dashboard'), ('custom', 'Custom Dashboard')], max_length=20)),
                ('description', models.TextField(blank=True, null=True)),
                ('layout_config', models.JSONField(default=dict, help_text='Dashboard layout configuration')),
                ('refresh_interval', models.PositiveIntegerField(default=300, help_text='Refresh interval in seconds')),
                ('is_default', models.BooleanField(default=False)),
                ('is_public', models.BooleanField(default=False)),
                ('allowed_roles', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_dashboards', to=settings.AUTH_USER_MODEL)),
                ('shared_with', models.ManyToManyField(blank=True, related_name='shared_dashboards', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Dashboard',
                'verbose_name_plural': 'Dashboards',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DashboardWidget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('widget_type', models.CharField(choices=[('metric', 'Metric/KPI'), ('chart', 'Chart'), ('table', 'Data Table'), ('gauge', 'Gauge'), ('progress', 'Progress Bar'), ('list', 'List'), ('calendar', 'Calendar'), ('map', 'Map')], max_length=20)),
                ('chart_type', models.CharField(blank=True, choices=[('line', 'Line Chart'), ('bar', 'Bar Chart'), ('pie', 'Pie Chart'), ('doughnut', 'Doughnut Chart'), ('area', 'Area Chart'), ('scatter', 'Scatter Plot')], max_length=20, null=True)),
                ('position_x', models.PositiveIntegerField(default=0)),
                ('position_y', models.PositiveIntegerField(default=0)),
                ('width', models.PositiveIntegerField(default=4)),
                ('height', models.PositiveIntegerField(default=3)),
                ('data_source', models.TextField(help_text='SQL query or data source configuration')),
                ('parameters', models.JSONField(default=dict)),
                ('chart_config', models.JSONField(default=dict, help_text='Chart styling and configuration')),
                ('auto_refresh', models.BooleanField(default=True)),
                ('refresh_interval', models.PositiveIntegerField(default=300, help_text='Refresh interval in seconds')),
                ('cached_data', models.JSONField(blank=True, null=True)),
                ('cache_expires', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('dashboard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='widgets', to='reports.dashboard')),
            ],
            options={
                'verbose_name': 'Dashboard Widget',
                'verbose_name_plural': 'Dashboard Widgets',
                'ordering': ['dashboard', 'position_y', 'position_x'],
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('format', models.CharField(choices=[('pdf', 'PDF'), ('excel', 'Excel'), ('csv', 'CSV'), ('html', 'HTML')], max_length=10)),
                ('parameters', models.JSONField(default=dict, help_text='Parameters used to generate the report')),
                ('date_from', models.DateField(blank=True, null=True)),
                ('date_to', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('generating', 'Generating'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('progress_percentage', models.PositiveIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(100)])),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('report_file', models.FileField(blank=True, null=True, upload_to='reports/')),
                ('file_size', models.PositiveIntegerField(default=0)),
                ('total_records', models.PositiveIntegerField(default=0)),
                ('summary_data', models.JSONField(blank=True, null=True)),
                ('chart_data', models.JSONField(blank=True, null=True)),
                ('is_confidential', models.BooleanField(default=False)),
                ('download_count', models.PositiveIntegerField(default=0)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_reports', to=settings.AUTH_USER_MODEL)),
                ('filtered_loan_officers', models.ManyToManyField(blank=True, related_name='officer_reports', to=settings.AUTH_USER_MODEL)),
                ('filtered_members', models.ManyToManyField(blank=True, related_name='reports', to='members.member')),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requested_reports', to=settings.AUTH_USER_MODEL)),
                ('shared_with', models.ManyToManyField(blank=True, related_name='shared_reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Report',
                'verbose_name_plural': 'Reports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReportAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('view', 'Viewed'), ('download', 'Downloaded'), ('share', 'Shared'), ('print', 'Printed')], max_length=20)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('accessed_at', models.DateTimeField(auto_now_add=True)),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='access_logs', to='reports.report')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='report_access_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Report Access',
                'verbose_name_plural': 'Report Access Logs',
                'ordering': ['-accessed_at'],
            },
        ),
        migrations.CreateModel(
            name='ReportTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('loan', 'Loan Reports'), ('member', 'Member Reports'), ('financial', 'Financial Reports'), ('performance', 'Performance Reports'), ('compliance', 'Compliance Reports'), ('operational', 'Operational Reports')], max_length=20)),
                ('query_template', models.TextField(help_text='SQL query template with parameters')),
                ('column_definitions', models.JSONField(help_text='Column definitions and formatting')),
                ('chart_config', models.JSONField(blank=True, help_text='Chart configuration if applicable', null=True)),
                ('default_format', models.CharField(choices=[('pdf', 'PDF'), ('excel', 'Excel'), ('csv', 'CSV'), ('html', 'HTML')], default='pdf', max_length=10)),
                ('is_scheduled_report', models.BooleanField(default=False)),
                ('requires_approval', models.BooleanField(default=False)),
                ('allowed_roles', models.JSONField(default=list, help_text='List of roles that can generate this report')),
                ('is_public', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_report_templates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Report Template',
                'verbose_name_plural': 'Report Templates',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.AddField(
            model_name='report',
            name='template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='generated_reports', to='reports.reporttemplate'),
        ),
        migrations.CreateModel(
            name='ScheduledReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly')], max_length=20)),
                ('run_time', models.TimeField(default='08:00')),
                ('day_of_week', models.PositiveIntegerField(blank=True, help_text='0=Monday, 6=Sunday (for weekly reports)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(6)])),
                ('day_of_month', models.PositiveIntegerField(blank=True, help_text='Day of month (for monthly reports)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)])),
                ('default_parameters', models.JSONField(default=dict)),
                ('format', models.CharField(choices=[('pdf', 'PDF'), ('excel', 'Excel'), ('csv', 'CSV'), ('html', 'HTML')], default='pdf', max_length=10)),
                ('email_recipients', models.TextField(blank=True, help_text='Additional email addresses (comma-separated)', null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('paused', 'Paused'), ('inactive', 'Inactive')], default='active', max_length=20)),
                ('last_run', models.DateTimeField(blank=True, null=True)),
                ('next_run', models.DateTimeField(blank=True, null=True)),
                ('run_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_scheduled_reports', to=settings.AUTH_USER_MODEL)),
                ('recipients', models.ManyToManyField(related_name='scheduled_reports', to=settings.AUTH_USER_MODEL)),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scheduled_reports', to='reports.reporttemplate')),
            ],
            options={
                'verbose_name': 'Scheduled Report',
                'verbose_name_plural': 'Scheduled Reports',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AnalyticsEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('member_registration', 'Member Registration'), ('loan_application', 'Loan Application'), ('loan_approval', 'Loan Approval'), ('loan_disbursement', 'Loan Disbursement'), ('payment_received', 'Payment Received'), ('payment_overdue', 'Payment Overdue'), ('loan_completion', 'Loan Completion'), ('system_login', 'System Login'), ('report_generated', 'Report Generated'), ('custom_event', 'Custom Event')], max_length=30)),
                ('event_name', models.CharField(max_length=100)),
                ('properties', models.JSONField(default=dict)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('session_id', models.CharField(blank=True, max_length=100, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('member', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='analytics_events', to='members.member')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='analytics_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Analytics Event',
                'verbose_name_plural': 'Analytics Events',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['event_type', 'timestamp'], name='reports_ana_event_t_563545_idx'), models.Index(fields=['user', 'timestamp'], name='reports_ana_user_id_b7c69a_idx'), models.Index(fields=['member', 'timestamp'], name='reports_ana_member__6622ae_idx')],
            },
        ),
        migrations.CreateModel(
            name='ReportBookmark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('saved_parameters', models.JSONField(default=dict)),
                ('bookmark_name', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='report_bookmarks', to=settings.AUTH_USER_MODEL)),
                ('report_template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookmarks', to='reports.reporttemplate')),
            ],
            options={
                'verbose_name': 'Report Bookmark',
                'verbose_name_plural': 'Report Bookmarks',
                'ordering': ['bookmark_name'],
                'unique_together': {('user', 'report_template', 'bookmark_name')},
            },
        ),
    ]
